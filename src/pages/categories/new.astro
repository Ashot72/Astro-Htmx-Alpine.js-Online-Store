---
import { z } from "zod";
import type { Category } from "@prisma/client";
import CategoriesView from "../../components/Categories/CategoriesView.astro";
import NewCategoryComp from "../../components/Categories/NewCategory.astro";
import { addCategory } from "../../server/categories";

const userId = Astro.locals.userId;

if (!userId) {
  return Astro.redirect("/");
}

const htmx = !!Astro.request.headers.get("HX-Request");

if (Astro.request.method !== "POST" || !htmx) {
  return Astro.redirect("/");
}

let data: Category, errors;

async function addNewCategory() {
  const formData = await Astro.request.formData();

  const name = formData.get("name") as string;
  const description = formData.get("description") as string;

  data = {
    name,
    description,
  } as Category;

  const result = z
    .object({
      name: z
        .string()
        .min(4)
        .regex(/^[a-zA-Z\s\&]*$/, "Must be letters, spaces and ampersands")
        .trim(),
      description: z.string().min(10).trim(),
    })
    .safeParse({ name, description });

  if (!result.success) {
    errors = result.error.flatten().fieldErrors;
    return;
  }

  try {
    const newCategory = {
      name: result.data.name,
      description: result.data.description,
      userId,
    } as Category;

    await addCategory(newCategory);
  } catch (e) {
    errors = { form: [e.message] };
    return;
  }
}

await addNewCategory();

export const partial = true;
---

{errors ? <NewCategoryComp {errors} {data} open /> : <CategoriesView />}
